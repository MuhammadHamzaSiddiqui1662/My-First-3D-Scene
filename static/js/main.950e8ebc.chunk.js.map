{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","camera","fov","near","far","position","OrbitControls","intensity","Plane","rotation","Math","PI","args","color","side","THREE","House","Tree","leaves","useRef","clockwise","i","useFrame","current","z","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.950e8ebc.chunk.js","sourcesContent":["import './App.css';\nimport * as THREE from 'three';\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { OrbitControls } from '@react-three/drei';\nimport { useRef } from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas camera={{ fov: 75, near: 0.1, far: 1000, position: [0, 30, 60] }} >\n        <OrbitControls />\n        <Plane />\n        <House />\n        <Tree />\n        <ambientLight intensity={0.5} />\n        <pointLight position={[100, 100, 100]} />\n      </Canvas>\n    </div>\n  );\n}\nexport default App;\n\nconst Plane = () => {\n  return (\n    <mesh rotation={[-Math.PI / 2, 0, 0]}>\n      <planeGeometry args={[50, 50]} />\n      <meshStandardMaterial color={'green'} side={THREE.DoubleSide} />\n    </mesh>\n  );\n}\n\nconst House = () => {\n  let position = [15, 5.1, -15];\n  return (\n    <group position={position}>\n      {/* Ground Floor */}\n      <mesh position-y={1.5}>\n        <boxGeometry args={[15, 13, 15]} />\n        <meshStandardMaterial color={'yellow'} />\n      </mesh>\n      {/* First Floor */}\n      <mesh position={[2.5, 10, -2.5]} >\n        <boxGeometry args={[10, 10, 10]} />\n        <meshStandardMaterial color={'yellow'} />\n      </mesh>\n      {/* Door */}\n      <mesh position={[0, -1.5, 7.6]}>\n        <planeGeometry args={[4, 7]} />\n        <meshStandardMaterial color={'red'} />\n      </mesh>\n      {/* Windows */}\n      <mesh position={[5, 10, 2.6]}>\n        <planeGeometry args={[2, 2]} />\n        <meshStandardMaterial color={'red'} />\n      </mesh>\n      <mesh position={[0, 10, 2.6]}>\n        <planeGeometry args={[2, 2]} />\n        <meshStandardMaterial color={'red'} />\n      </mesh>\n      {/* Door Nob */}\n      <mesh position={[1, -2, 7.7]}>\n        <circleGeometry args={[0.5, 10]} />\n        <meshStandardMaterial color={'yellow'} />\n      </mesh>\n    </group>\n  )\n}\n\nconst Tree = () => {\n  const leaves = useRef();\n  let clockwise = false;\n  let i = 30;\n  useFrame(() => {\n    if (clockwise) {\n      leaves.current.rotation.z += 0.005;\n      i++;\n    }\n    else {\n      leaves.current.rotation.z -= 0.005;\n      i--;\n    }\n    if (i == 0) clockwise = true;\n    if (i == 60) clockwise = false;\n  })\n  return (\n    <group position={[-13, 0.1, -10]}>\n      <mesh position-y={5}>\n        <cylinderGeometry args={[1, 3, 10, 20]} />\n        <meshStandardMaterial color={'brown'} />\n      </mesh>\n      <group ref={leaves} position-y={10}>\n        <mesh position={[0, 2, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[3, 2, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[-3, 2, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[2, 4, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[-2, 4, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[0, 7, 0]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[0, 2, 0.8]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n        <mesh position={[0, 2, -0.8]}>\n          <sphereGeometry args={[4, 50, 50]} />\n          <meshStandardMaterial color={\"green\"} />\n        </mesh>\n      </group>\n    </group>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}